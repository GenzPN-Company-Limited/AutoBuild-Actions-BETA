###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: Redmi AC2100

### Interface Control Section (Please keep the following content unchanged)
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Tempoary_IP:
        description: 'Firmware IP Address [Optional]'
        default: ''
      Tempoary_CONFIG:
        description: 'Configuration File [Optional]'
        default: ''
      Tempoary_FLAG:
        description: 'Firmware Tag [Optional]'
        default: ''
### End of Interface Control Section (Please keep the above content unchanged)

  ## Trigger compilation on Git Push (do not delete this comment line)
  #push:
  #  branches: 
  #    - master
  
  ## Scheduled Trigger Compilation (do not delete this comment line)
  #schedule:
  #  - cron: 0 8 * * 5
  
  ## Trigger compilation when Star is re-lit (do not delete this comment line)
  #watch:
  #  types: [started]

### Please modify the following content as needed
### Environment Variable Settings
env:
# Name of the [.config] file called during compilation
  CONFIG_FILE: xiaomi_redmi-router-ac2100
# Source repository: branch
  DEFAULT_SOURCE: coolsnowwolf/lede:master
# Upload firmware to Github Releases
  UPLOAD_RELEASES: true
# Upload firmware to Github Artifacts
  UPLOAD_ARTIFACTS: false
# Upload bin folder to Github Artifacts
  UPLOAD_BIN_ARTIFACTS: false
# Delete unused files to increase compilation space
  DELETE_USELESS_FILES: true
# Delete earlier workflow tasks
  DELETE_OLD_WORKFLOW: false
# Cache accelerate compilation
  CACHE_ACCELERATE: false
### End
### Please modify the above content as needed

jobs:
  Compile:
    runs-on: ubuntu-20.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
    - name: "Optimize disk space"
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Free up disk space
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        if [ -n "${{ github.event.inputs.Tempoary_CONFIG }}" ]
        then
            if [ -f "$GITHUB_WORKSPACE/Configs/${{ github.event.inputs.Tempoary_CONFIG }}" ]
            then
                CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}
            else
                CONFIG_FILE=${{ env.CONFIG_FILE }}
            fi
        else
            CONFIG_FILE=${{ env.CONFIG_FILE }}
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_IP }}" ]
        then
            echo "IP: [${{ github.event.inputs.Tempoary_IP }}]"
            echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_FLAG }}" ]
        then
            echo "FLAG: [${{ github.event.inputs.Tempoary_FLAG }}]"
            echo "Tempoary_FLAG=${{ github.event.inputs.Tempoary_FLAG }}" >> $GITHUB_ENV
        fi
        REPO_URL="https://github.com/$(cut -d \: -f 1 <<< ${{ env.DEFAULT_SOURCE }})"
        REPO_BRANCH=$(cut -d \: -f 2 <<< ${{ env.DEFAULT_SOURCE }})
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt update
        sudo -E apt -y full-upgrade
        sudo -E apt-get -y install busybox build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Clone Openwrt Source Code
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Accelerate
      if: env.CACHE_ACCELERATE == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: false
        toolchain: true
        skip: true
        clean: true
        prefix: ${{ github.workspace }}/openwrt

    - name: Run Diy Scripts
      run: |
        echo "Free space:"
        df -h
        chmod +x Scripts/AutoBuild_*.sh
        cd openwrt
        if [ "${{ env.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
        fi
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        make defconfig
        Firmware_Diy_Start
        rm -f .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        Firmware_Diy_Main
        Firmware_Diy
        Firmware_Diy_Other

    - name: Pre-download Libraries
      run: |
        cd openwrt
        ./scripts/feeds install -a
        make defconfig
        make download -j8

    - name: Build OpenWrt
      run: |
        cd openwrt
        make -j4 || make -j1 V=s
        [ "$?" == 0 ] && echo "Compile_Result=true" >> $GITHUB_ENV || echo "Compile_Result=false" >> $GITHUB_ENV

    - name: Checkout Firmware
      if: env.Compile_Result == 'true' && !cancelled()
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_End

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && env.Compile_Result == 'true' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_firmware_${{ env.Compile_Date }}
        path: openwrt/bin/Firmware

    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_ARTIFACTS == 'true' && env.Compile_Result == 'true' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_bin_${{ env.Compile_Date }}
        path: openwrt/bin

    - name: Upload Firmware to Releases
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASES == 'true' && env.Compile_Result == 'true' && !cancelled()
      with:
        allowUpdates: true
        artifacts: "openwrt/bin/Firmware/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ github.event.inputs.Tempoary_FLAG }}_${{ env.CONFIG_FILE }}
        tag: ${{ github.event.inputs.Tempoary_FLAG }}_${{ env.CONFIG_FILE }}
        body: |
          IP Address: ${{ github.event.inputs.Tempoary_IP }}
          Date: ${{ env.Display_Date }}
          AutoBuild-Actions Build Complete!
        prerelease: true
