Sysinfo() {
    TARGET_PROFILE=$(getinf TARGET_PROFILE /rom/etc/autoupdate/default)
    TARGET_BOARD=$(getinf TARGET_BOARD /rom/etc/autoupdate/default)
    [ -z "${TARGET_PROFILE}" ] && echo
    if [ "${TARGET_BOARD}" == x86 ]; then
        [ -d /sys/firmware/efi ] && TARGET_BOOTABLE="UEFI" || TARGET_BOOTABLE="BIOS"
    fi
    [ -f /etc/bench.log ] && CoreMark=$(egrep -o "[0-9]+" /etc/bench.log | awk 'NR==1')
    if [ -n "$(sensors 2> /dev/null | grep Core)" ]; then
        TEMP=$(echo "$(sensors 2> /dev/null | grep Core | awk '{Sum += $3};END {print Sum}') / $(sensors 2>/dev/null | grep Core | wc -l)" | bc 2> /dev/null)
    fi
    TEMP="$(temp_color ${TEMP})"
    if [ -n "${TARGET_BOOTABLE}" ]; then
        printf "            Device Information:		%-7s ${Div} ${Green}%-12s${White}\n" ${TARGET_PROFILE} ${TARGET_BOOTABLE}
    else
        [ -n "${TARGET_PROFILE}" ] && printf "            Device Information:		${TARGET_PROFILE}\n"
    fi
    printf "            Kernel Version:		$(uname -rs | cut -d ' ' -f2)\n"
    printf "            Available Memory:		%-7s ${Div} %s of %s\n" $(free | grep Mem | awk '{a=$7*100/$2;b=$7/1024;c=$2/1024} {printf("%.1fM %.1f%% %.1fM",b,a,c)}')
    printf "            Available Storage:		%-7s ${Div} %s of %s\n" $(df -T '/' | grep -v File | awk '{a=$5*100/$3;b=$5/1024;c=$3/1024} {printf("%.1fM %.1f%% %.1fM",b,a,c)}')
    [ -n "${TEMP}" ] && printf "            Device Temperature:		${TEMP}\n"
    [ -n "${CoreMark}" ] && printf "            Performance Score:		${CoreMark}\n"
    [ -f /proc/uptime ] && printf "            Uptime: 		$(awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=($1%60)} {printf("%d days %d hours %d minutes %d seconds\n",a,b,c,d)}' /proc/uptime)\n"
    [ -n "${SSH_CONNECTION}" ] && printf "            Logged-in User:		%-7s ${Div} %s\n" ${LOGNAME} $(echo ${SSH_CONNECTION} | awk '{print $1":"$2}')
    printf "${White}\n"
}

getinf() {
    local i=$(grep $1 $2  2> /dev/null | awk 'END {print}')
    [ -z "${i}" ] && return 1
    eval echo ${i} | sed "s/^[$1=]*//g" 2> /dev/null
}

temp_color() {
    if [ -n "$1" ]; then
        if [ $1 -gt 55 ]; then
            echo -ne "${Red}WARN ${1}°C${White}"
        else
            echo -n "${1}°C"
        fi
    fi
}

White="\e[0m"
Yellow="\e[33m"
Red="\e[31m"
Blue="\e[34m"
Grey="\e[36m"
Green="\e[32m"
Div="${Grey}|${White}"

clear

[ -e /tmp/.failsafe ] && export FAILSAFE=1
[ -f /etc/banner ] && printf "$(cat /etc/banner)\n"
[ -n "$FAILSAFE" ] && cat /etc/banner.failsafe

Sysinfo

fgrep -sq '/ overlay ro,' /proc/mounts && {
    printf "${Red}Warning: Firmware available space is full. Please try to clean up files or reflash the firmware!
      Conversely, uninstalling the built-in system packages does not help with space cleanup; therefore, try uninstalling user-installed packages.${White}\n\n"
}

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"
export HOME=$(grep -e "^${USER:-root}:" /etc/passwd | cut -d ":" -f 6)
export HOME=${HOME:-/root}
export CONFIG=/etc/config
if [ -n "${TARGET_PROFILE}" ]; then
    export PS1='\u@\h[${TARGET_PROFILE}]:\w\$ '
else
    export PS1='\u@\h:\w\$ '
fi
export ENV=/etc/shinit

case "$TERM" in
    xterm*|rxvt*)
        export PS1='\[\e]0;\u@\h: \w\a\]'$PS1
        ;;
esac

[ -n "$FAILSAFE" ] || {
    for FILE in /etc/profile.d/*.sh; do
        [ -e "$FILE" ] && . "$FILE"
    done
    unset FILE
}

if ( grep -qs '^root::' /etc/shadow && \
     [ -z "$FAILSAFE" ] )
then
    echo -e "${Red}            ==================== Warning ========================
             The current device does not have a password set for the root user!
             Please use the "passwd" command to set a system password to improve security
             and prevent unauthorized SSH use by root for illegal logins.
            --------------------------------------------------${White}
"
fi

[ -x /bin/more ] || alias more='less'
[ -x /usr/bin/vim ] && alias vi='vim' || alias vim='vi'

[ -z "$KSH_VERSION" -o \! -s /etc/mkshrc ] || . /etc/mkshrc

[ -x /usr/bin/arp -o -x /sbin/arp ] || arp() { cat /proc/net/arp; }
[ -x /usr/bin/ldd ] || ldd() { LD_TRACE_LOADED_OBJECTS=1 $*; }

alias reload='. /etc/profile'
alias coremarkd='/etc/coremark.sh'
alias shutdown='sync && poweroff'
alias ls='ls --color=auto'
alias l='ls -CF'
alias ll='ls -alF'
alias la='ls -A'
alias cls='clear'
alias syslog='cat $(uci get system.@system[0].log_file) 2> /dev/null'
alias ramfree='sync && echo 3 > /proc/sys/vm/drop_caches'
alias top='top -d 1'
