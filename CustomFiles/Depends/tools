#!/bin/bash
# AutoBuild Module by Hyy2001 <https://github.com/Hyy2001X/AutoBuild-Actions>
# AutoBuild_Tools for Openwrt
# Dependencies: bash wget curl block-mount e2fsprogs smartmontools

Version=V1.8.8

ECHO() {
	case $1 in
		r) Color="${Red}";;
		g) Color="${Green}";;
		b) Color="${Blue}";;
		y) Color="${Yellow}";;
		x) Color="${Grey}";;
	esac
	[[ $# -gt 1 ]] && shift
	echo -e "${White}${Color}${*}${White}"
}

AutoBuild_Tools_UI() {
while :
do
	clear
	echo -e "$(cat /etc/banner)"
	echo -e "
${Grey}AutoBuild Firmware Toolbox ${Version}${White} [$$] [${Tools_File}]

1. USB Space Expansion		6. Environment Repair
2. Samba Settings		7. System Information Monitoring
3. Port Usage List		8. Online Device List
4. Disk Information		9. Create Virtual Memory (swap)
5. Network Check

${Grey}u. Firmware Update
${Yellow}x. Update Script
${White}q. Exit
"
	read -p "Please choose an operation from the options above:" Choose
	case $Choose in
	q)
		rm -rf ${Tools_Cache}/*
		exit 0
	;;
	u)
		[[ -s ${AutoUpdate_File} ]] && {
			AutoUpdate_UI
		} || {
			ECHO r "\n${AutoUpdate_File} not detected, please ensure that the current firmware supports scheduled updates!"
			sleep 2
		}
	;;
	x)
		wget -q ${Github_Raw}/CustomFiles/Depends/tools -O ${Tools_Cache}/tools
		if [[ $? == 0 && -s ${Tools_Cache}/tools ]]
		then
			ECHO y "\n[AutoBuild_Tools] Script updated successfully!"
			rm -f ${Tools_File}
			mv -f ${Tools_Cache}/tools ${Tools_File}
			chmod +x ${Tools_File}
			sleep 2
			exec ${Tools_File}
		else
			ECHO r "\n[AutoBuild_Tools] Script update failed!"
			sleep 2
		fi
	;;
	1)
		if_PKG_Depends block lsblk mkfs.ext4:e2fsprogs && AutoExpand_UI
	;;
	2)
		if_PKG_Depends smbpasswd:samba block && Samba_UI
	;;
	3)
		if_PKG_Depends netstat && {
			ECHO y "\nLoading Service Configuration ..."
			Netstat1=${Tools_Cache}/Netstat1
			Netstat2=${Tools_Cache}/Netstat2
			ps_Info=${Tools_Cache}/ps_Info
			rm -f ${Netstat2} && touch -a ${Netstat2}
			netstat -ntupa | grep -v "::ffff" |egrep ":::[0-9].+|0.0.0.0:[0-9]+|127.0.0.1:[0-9]+" | awk '{print $1" "$4" "$6" "$7}' | sed -r 's/0.0.0.0:/\1/;s/:::/\1/;s/127.0.0.1:/\1/;s/LISTEN/\1/' | sort | uniq > ${Netstat1}
			ps -efww > ${ps_Info}
			local i=1;while :;do
				Proto=$(sed -n ${i}p ${Netstat1} | awk '{print $1}')
				[[ -z ${Proto} ]] && break
				Port=$(sed -n ${i}p ${Netstat1} | awk '{print $2}')
				_Service=$(sed -n ${i}p ${Netstat1} | awk '{print $3}')
				[[ ${_Service} == '-' ]] && {
					Service="Unknown"
				} || {
					Service=$(echo ${_Service} | cut -d '/' -f2)
					PID=$(echo ${_Service} | cut -d '/' -f1)
					Task=$(grep -v "grep" ${ps_Info} | grep "${PID}" | awk '{print $5}')
				}
				i=$(($i + 1))
				echo -e "${Proto} ${Port} ${Service} ${PID} ${Task}" | egrep "tcp|udp" >> ${Netstat2}
			done
			clear
			ECHO x "Port Usage List\n"
			printf "${Grey}%-10s %-16s %-22s %-12s %-40s\n${White}" Protocol Port Service Name PID Process Info
			local X;while read X;do
				printf "%-8s %-12s %-18s %-12s %-40s\n" ${X}
			done < ${Netstat2}
			ENTER
		}
	;;
	4)
		if_PKG_Depends smartctl:smartmontools && SmartInfo_UI
	;;
	5)
		if_PKG_Depends curl nslookup&& {
			ping 223.5.5.5 -c 1 -W 2 > /dev/null 2>&1 && \
				ECHO y "\nBasic network connection is normal!" || ECHO r "\nBasic network connection error!"
			nslookup -type=a 163.com > /dev/null 2>&1 && \
				ECHO y "Basic IPv4 DNS resolution is normal!" || ECHO r "Basic IPv4 DNS resolution error!"
			Google_Check=$(curl -I -s --connect-timeout 3 google.com -w %{http_code} | tail -n1)
			case ${Google_Check} in
			301)
				ECHO y "Google connection is normal!"
			;;
			*)
				ECHO r "Google connection error!"
			;;
			esac
			sleep 2
		}
	;;
	6)
		cp -a /rom/etc/profile /etc
		cp -a /rom/etc/banner /etc
		cp -a /rom/etc/openwrt_release /etc
		cp -a /rom/etc/autoupdate/default /etc/autoupdate
		cp -a /rom/bin/autoupdate ${AutoUpdate_File}
		chmod +x ${AutoUpdate_File}
		cp -a /rom/bin/tools ${Tools_File}
		cp -a /rom/etc/config/autoupdate /etc/config
		ECHO y "\nFirmware environment repair completed!"
		sleep 2
	;;
	7)
		Sysinfo show
	;;
	8)
		clear
		ECHO x "Online Device List\n"
		printf "${Grey}%-8s %-24s %-20s %-10s${White}\n" No. "MAC Address" "IP Address" Device Name
		i=1;grep "br-lan" /proc/net/arp | grep "0x2" | grep -v "0x0" | awk '{print $4"\t"$1}' | while read X;do
			printf " %-5s %-22s %-18s %-10s\n" ${i} ${X} $(if_Empty "$(grep $(echo ${X} | awk '{print $2}') /tmp/dhcp.leases | awk '{print $4}' | head -n 1)" Unknown)
			i=$(($i + 1))
		done
		unset i
		ENTER
	;;
	9)
		echo
		read -p "Please enter the location to store the swap file:" swap_Path
		read -p "Please enter the size of the swap partition:" swap_Size
		if [[ -f ${swap_Path}/swapfile ]]
		then
			ECHO r "\nSwap file 'swapfile' already exists in directory '${swap_Path}', and the file size is $(du ${swap_Path}/swapfile -h | cut -d '' -f1)
Continuing will overwrite the existing swapfile file in that directory!\n"
			read -p "Do you want to continue?[Y/n]:" Choose
			[[ ! ${Choose} == [Yesyes] ]] && continue
			[[ ! -w ${swap_Path}/swapfile ]] && chmod 777 ${swap_Path}/swapfile
			swapoff -a
			rm -rf ${swap_Path}/swapfile
		fi
		ECHO y "\nCreating ${swap_Path}/swapfile ..."
		dd if=/dev/zero of=${swap_Path}/swapfile bs=1M count=${swap_Size}
		if [[ $? == 0 ]]
		then
			mkswap ${swap_Path}/swapfile && ECHO y "Swap file [${swap_Path}/swapfile] created successfully, you can manually go to 'System-Mount Points' to set it up!" || ECHO r "Swap file creation failed!"
			chmod 0600 ${swap_Path}/swapfile
		else
			ECHO r "Swap file creation failed!"
			rm -rf ${swap_Path}/swapfile
		fi
		sleep 3
	;;
	esac
done
}

if_PKG_Depends() {
	while [[ $1 ]];do
		CMD=$(echo $1 | cut -d ':' -f1)
		PKG=$(echo $1 | cut -d ':' -f2)
		[[ -z ${PKG} ]] && PKG=${CMD}
		[[ ! $(opkg list_installed | grep "${PKG}") ]] && {
			ECHO r "\nPackage [${PKG}] not detected!"
			read -p "Attempt to install it now?[Y/n]:" Choose
			[[ ! ${Choose} == [Yy] ]] && return 1
			opkg update > /dev/null 2>&1
			opkg install ${PKG} > /dev/null 2>&1
			[[ $? != 0 ]] && {
				ECHO r "Package [${PKG}] installation failed!"
				sleep 2
				return 1
			} || ECHO y "Package [${PKG}] installed successfully!"
		}
		shift
	done
	return 0
}

Sysinfo() {
	clear
	ECHO x "System Information\n"
	[[ $1 == show ]] && cat /tmp/sysinfo/board_name
	echo
	LSCPU_Info=$(lscpu | grep -v "node\|NUMA")
	CPU_Temperature=$(cat /sys/class/thermal/thermal_zone0/temp)
	CPU_Temperature=$(awk 'BEGIN{printf "%.1f\n",('${CPU_Temperature}'/1000)}')
	Core_Thread=$(echo "${LSCPU_Info}" | grep -m 1 "CPU(s)" | awk '{print $2}')
	Core_Frequency=$(echo "${LSCPU_Info}" | grep -m 1 "CPU max MHz" | awk '{print $4}')
	if [[ -z ${Core_Frequency} ]]
	then
		Core_Frequency=$(echo "${LSCPU_Info}" | grep -m 1 "CPU MHz" | awk '{print $3}')
		[[ $(echo ${LSCPU_Info} | grep " GHz") ]] && {
			Core_Frequency=$(awk 'BEGIN{printf "%.0f\n",('${Core_Frequency}'*1000)}')
		}
	fi
	if [[ $(which cpufreq-info) ]]
	then
		Core_Frequency=$(cpufreq-info | grep "maximum" | awk '{print $3}')
		[[ $(echo ${Core_Frequency} | grep "GHz") ]] && {
			Core_Frequency=$(echo ${Core_Frequency} | sed -r 's/ GHz//g')
			Core_Frequency=$(awk 'BEGIN{printf "%.0f\n",('${Core_Frequency}'*1000)}')
		}
	fi
	Memory_Info=$(free | grep -w "Mem")
	Memory_Total=$(echo ${Memory_Info} | awk '{print $2}')
	Memory_Used=$(echo ${Memory_Info} | awk '{print $3}')
	[[ ! -z $(which smartctl) ]] && {
		Model_Info=$(smartctl -i /dev/sda | grep -m 1 "Model Family" | cut -d ':' -f2)
		[[ -z ${Model_Info} ]] && Model_Info=$(smartctl -i /dev/sda | grep -m 1 "Device Model" | cut -d ':' -f2)
	}
	Model_Info=$(if_Empty "${Model_Info}" Unknown)
	Firmware_Version=$(cat /etc/openwrt_info | grep "Firmware" | cut -d ':' -f2)
	Kernel_Version=$(cat /etc/openwrt_info | grep "Kernel" | cut -d ':' -f2)
	Up_Time=$(if_Empty "$(cat /proc/uptime | awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=$1%60;printf("%d day(s) %02d hour(s) %02d minute(s) %02d second(s)\n",a,b,c,d)}')" Unknown)
	printf "${Grey}%-24s %-28s\n${White}" Device Name: $(cat /proc/sys/kernel/hostname) Model: $(cat /tmp/sysinfo/model)
	printf "${Grey}%-24s %-28s\n${White}" CPU Temperature: ${CPU_Temperature} Â°C Core/Thread: ${Core_Thread}
	printf "${Grey}%-24s %-28s\n${White}" CPU Frequency: ${Core_Frequency} MHz Memory Usage: $(awk 'BEGIN{printf "%.2f\n",('${Memory_Used}'/'${Memory_Total}'*100)}') %
	printf "${Grey}%-24s %-28s\n${White}" Total Memory: $(awk 'BEGIN{printf "%.1f\n",('${Memory_Total}'/1024/1024)}') GB Used Memory: $(awk 'BEGIN{printf "%.1f\n",('${Memory_Used}'/1024/1024)}') GB
	printf "${Grey}%-24s %-28s\n${White}" Storage Model: ${Model_Info} Firmware Version: ${Firmware_Version}
	printf "${Grey}%-24s %-28s\n${White}" Kernel Version: ${Kernel_Version} Run Time: ${Up_Time}
	ENTER
}

if_Empty() {
	[[ -z $1 ]] && echo "$2" || echo "$1"
}

ENTER() {
	echo -e "\nPress Enter to return ..."
	read -r _
}

Tools_File=$(cd $(dirname $0);pwd)/$(basename $0)
Tools_Cache=/tmp/AutoBuild_Tools
AutoUpdate_File=/bin/AutoUpdate.sh
Github=https://github.com/GenzPN-Company-Limited/AutoBuild-Actions
Github_Raw=https://cdn.jsdelivr.net/gh/GenzPN-Company-Limited/AutoBuild-Actions@main

White="\e[0m"
Grey="\e[1;30m"
Red="\e[1;31m"
Green="\e[1;32m"
Yellow="\e[1;33m"
Blue="\e[1;34m"

mkdir -p ${Tools_Cache}
AutoBuild_Tools_UI
